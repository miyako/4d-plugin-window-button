/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Window Button
 #	author : miyako
 #	2017/06/08
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Window Button

		case 1 :
			WINDOW_SET_ENABLED(pResult, pParams);
			break;

		case 2 :
			WINDOW_Get_enabled(pResult, pParams);
			break;

	}
}

#pragma mark Window

WindowRef PA_GetWindowRef(int winId)
{
	return (WindowRef)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(winId));
}

NSWindow *PA_GetWindowRef64(int winId)
{
	//EX_GET_HWND has been fixed in 15R3 to return a NSWindow* on mac 64bit.
	//http://forums.4d.fr/Post/EN/15872830/1/17032044
	
	PA_ulong32 version = (PA_Get4DVersion() & 0x0000FFFF);
	//	int minor = version & 0x000F;
	int r = (version & 0x00F0) >> 4;
	int major = (version & 0xFF00) >> 8;
	if (((major >=0x15) && (r >= 3)) || (major >=0x16))
	{
		return (NSWindow *)PA_GetWindowPtr(reinterpret_cast<NSWindow *>(winId));
	}
	return 0;
}

#define Window_close_button 0
#define Window_minimize_button 1
#define Window_zoom_button 2
#define Window_document_modified 3

#pragma mark Window Button

NSWindow *getWindow(C_LONGINT &Param)
{
	return PA_GetWindowRef64(Param.getIntValue());
}

#ifndef __LP64__
void setButton(WindowRef window, int attribute, int set)
{
	int	attributes[] = {attribute, 0};
	
	if(set)
	{
		HIWindowChangeAttributes(window, attributes, 0);
	}else{
		HIWindowChangeAttributes(window, 0, attributes);
	}
}
int getButton(WindowRef window, int attribute)
{
	return HIWindowTestAttribute(window, attribute);
}
#else
void setButton(NSWindow *window, NSWindowButton attribute, int set)
{
	[[window standardWindowButton:attribute] setEnabled:set];
}
int getButton(NSWindow *window, NSWindowButton attribute)
{
	return [[window standardWindowButton:attribute] isEnabled];
}
#endif

// --------------------------------- Window Button --------------------------------


void WINDOW_SET_ENABLED(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
#if CGFLOAT_IS_DOUBLE
	NSWindow *window = getWindow(Param1);
	if (window)
	{
		switch (Param2.getIntValue())
		{
			case Window_minimize_button:
				setButton(window, NSWindowMiniaturizeButton, Param3.getIntValue());
				break;
			case Window_zoom_button:
				setButton(window, NSWindowZoomButton, Param3.getIntValue());
				break;
			case Window_close_button:
				setButton(window, NSWindowCloseButton, Param3.getIntValue());
				break;
			default:
				[window setDocumentEdited:Param3.getIntValue()];
				break;
		}
	}
#else
	WindowRef windowRef = PA_GetWindowRef(Param1.getIntValue());
	switch (Param2.getIntValue())
	{
  case Window_minimize_button:
			setButton(windowRef, kHIWindowBitCollapseBox, Param3.getIntValue());
			break;
  case Window_zoom_button:
			setButton(windowRef, kHIWindowBitZoomBox, Param3.getIntValue());
			break;
  case Window_close_button:
			setButton(windowRef, kHIWindowBitCloseBox, Param3.getIntValue());
			break;
  default:
			SetWindowModified(windowRef, Param3.getIntValue());
			break;
	}
#endif
	
}

void WINDOW_Get_enabled(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

#if CGFLOAT_IS_DOUBLE
	NSWindow *window = getWindow(Param1);
	if (window)
	{
		switch (Param2.getIntValue())
		{
			case Window_minimize_button:
				returnValue.setIntValue(getButton(window, NSWindowMiniaturizeButton));
				break;
			case Window_zoom_button:
				returnValue.setIntValue(getButton(window, NSWindowZoomButton));
				break;
			case Window_close_button:
				returnValue.setIntValue(getButton(window, NSWindowCloseButton));
				break;
			default:
				returnValue.setIntValue([window isDocumentEdited]);
				break;
		}
	}
#else
	WindowRef windowRef = PA_GetWindowRef(Param1.getIntValue());
	switch (Param2.getIntValue())
	{
  case Window_minimize_button:
			returnValue.setIntValue(getButton(windowRef, kHIWindowBitCollapseBox));
			break;
  case Window_zoom_button:
			returnValue.setIntValue(getButton(windowRef, kHIWindowBitZoomBox));
			break;
  case Window_close_button:
			returnValue.setIntValue(getButton(windowRef, kHIWindowBitCloseBox));
			break;
  default:
			returnValue.setIntValue(IsWindowModified(windowRef));
			break;
	}
#endif

	returnValue.setReturn(pResult);
}

